README:
Author: Adam Tringali SBU ID: 111321401

dnspoison.py [-i interface] [-f hostnames] [expression]

-i  Listen on network device <interface> (e.g., eth0). If not specified,
    dnspoison should select a default interface to listen on. The same
    interface should be used for packet injection.

-f  Read a list of IP address and hostname pairs specifying the hostnames to
    be hijacked. If '-f' is not specified, dnspoison should forge replies to
    all observed requests with the local machine's IP address as an answer.
    THESE HOSTNAMES HAVE TO BE IDENTICAL TO THE HOSTNAMES FOR DNS QUERY; IF "1.1.1.1 cs.stonybrook.edu" IS IN HOSTFILE AND USER GOES TO "www.cs.stonybrook.edu" THEN NO POISONING IS DONE! 

The optional <expression> argument is a BPF filter that specifies a subset of
the traffic to be monitored. This option is useful for targeting a single
victim or a group of victims.

DNS server used to 'slow down' responses: 8.26.56.26
successful_test1.pcap shows my progrom won the race when visiting microsoft.com (the malicious ip response for microsoft.com was 10.0.2.4)

successful_test2.pcap shows my progrom won the race when visiting alfred.com (the malicious ip response for alfred.com was 10.0.2.4)

Example output for 'sudo python3 dnspoison.py -f hosts.txt' & 'ping cs.stonybrook.edu' on seperate terminal
	filename: hosts.txt
	Sniffing...
	.
	Sent 1 packets.

Example output for 'sudo python3 dnspoison.py -i eth0' & ping google.com
	interface: eth0
	Sniffing...
	.
	Sent 1 packets.


